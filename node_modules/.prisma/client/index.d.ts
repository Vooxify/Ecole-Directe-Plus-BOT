
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model APIUser
 * 
 */
export type APIUser = $Result.DefaultSelection<Prisma.$APIUserPayload>
/**
 * Model AnonymousUserVisit
 * 
 */
export type AnonymousUserVisit = $Result.DefaultSelection<Prisma.$AnonymousUserVisitPayload>
/**
 * Model DiscordServer
 * 
 */
export type DiscordServer = $Result.DefaultSelection<Prisma.$DiscordServerPayload>
/**
 * Model Counter
 * 
 */
export type Counter = $Result.DefaultSelection<Prisma.$CounterPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const Group: {
  USER: 'USER',
  AUTHUSER: 'AUTHUSER',
  NOTAUTHUSER: 'NOTAUTHUSER'
};

export type Group = (typeof Group)[keyof typeof Group]

}

export type Group = $Enums.Group

export const Group: typeof $Enums.Group

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more APIUsers
 * const aPIUsers = await prisma.aPIUser.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more APIUsers
   * const aPIUsers = await prisma.aPIUser.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.aPIUser`: Exposes CRUD operations for the **APIUser** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more APIUsers
    * const aPIUsers = await prisma.aPIUser.findMany()
    * ```
    */
  get aPIUser(): Prisma.APIUserDelegate<ExtArgs>;

  /**
   * `prisma.anonymousUserVisit`: Exposes CRUD operations for the **AnonymousUserVisit** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more AnonymousUserVisits
    * const anonymousUserVisits = await prisma.anonymousUserVisit.findMany()
    * ```
    */
  get anonymousUserVisit(): Prisma.AnonymousUserVisitDelegate<ExtArgs>;

  /**
   * `prisma.discordServer`: Exposes CRUD operations for the **DiscordServer** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more DiscordServers
    * const discordServers = await prisma.discordServer.findMany()
    * ```
    */
  get discordServer(): Prisma.DiscordServerDelegate<ExtArgs>;

  /**
   * `prisma.counter`: Exposes CRUD operations for the **Counter** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Counters
    * const counters = await prisma.counter.findMany()
    * ```
    */
  get counter(): Prisma.CounterDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.21.1
   * Query Engine version: bf0e5e8a04cada8225617067eaa03d041e2bba36
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    APIUser: 'APIUser',
    AnonymousUserVisit: 'AnonymousUserVisit',
    DiscordServer: 'DiscordServer',
    Counter: 'Counter'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "aPIUser" | "anonymousUserVisit" | "discordServer" | "counter"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      APIUser: {
        payload: Prisma.$APIUserPayload<ExtArgs>
        fields: Prisma.APIUserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.APIUserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$APIUserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.APIUserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$APIUserPayload>
          }
          findFirst: {
            args: Prisma.APIUserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$APIUserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.APIUserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$APIUserPayload>
          }
          findMany: {
            args: Prisma.APIUserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$APIUserPayload>[]
          }
          create: {
            args: Prisma.APIUserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$APIUserPayload>
          }
          createMany: {
            args: Prisma.APIUserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.APIUserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$APIUserPayload>[]
          }
          delete: {
            args: Prisma.APIUserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$APIUserPayload>
          }
          update: {
            args: Prisma.APIUserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$APIUserPayload>
          }
          deleteMany: {
            args: Prisma.APIUserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.APIUserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.APIUserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$APIUserPayload>
          }
          aggregate: {
            args: Prisma.APIUserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAPIUser>
          }
          groupBy: {
            args: Prisma.APIUserGroupByArgs<ExtArgs>
            result: $Utils.Optional<APIUserGroupByOutputType>[]
          }
          count: {
            args: Prisma.APIUserCountArgs<ExtArgs>
            result: $Utils.Optional<APIUserCountAggregateOutputType> | number
          }
        }
      }
      AnonymousUserVisit: {
        payload: Prisma.$AnonymousUserVisitPayload<ExtArgs>
        fields: Prisma.AnonymousUserVisitFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AnonymousUserVisitFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AnonymousUserVisitPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AnonymousUserVisitFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AnonymousUserVisitPayload>
          }
          findFirst: {
            args: Prisma.AnonymousUserVisitFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AnonymousUserVisitPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AnonymousUserVisitFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AnonymousUserVisitPayload>
          }
          findMany: {
            args: Prisma.AnonymousUserVisitFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AnonymousUserVisitPayload>[]
          }
          create: {
            args: Prisma.AnonymousUserVisitCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AnonymousUserVisitPayload>
          }
          createMany: {
            args: Prisma.AnonymousUserVisitCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AnonymousUserVisitCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AnonymousUserVisitPayload>[]
          }
          delete: {
            args: Prisma.AnonymousUserVisitDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AnonymousUserVisitPayload>
          }
          update: {
            args: Prisma.AnonymousUserVisitUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AnonymousUserVisitPayload>
          }
          deleteMany: {
            args: Prisma.AnonymousUserVisitDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AnonymousUserVisitUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.AnonymousUserVisitUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AnonymousUserVisitPayload>
          }
          aggregate: {
            args: Prisma.AnonymousUserVisitAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAnonymousUserVisit>
          }
          groupBy: {
            args: Prisma.AnonymousUserVisitGroupByArgs<ExtArgs>
            result: $Utils.Optional<AnonymousUserVisitGroupByOutputType>[]
          }
          count: {
            args: Prisma.AnonymousUserVisitCountArgs<ExtArgs>
            result: $Utils.Optional<AnonymousUserVisitCountAggregateOutputType> | number
          }
        }
      }
      DiscordServer: {
        payload: Prisma.$DiscordServerPayload<ExtArgs>
        fields: Prisma.DiscordServerFieldRefs
        operations: {
          findUnique: {
            args: Prisma.DiscordServerFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DiscordServerPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.DiscordServerFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DiscordServerPayload>
          }
          findFirst: {
            args: Prisma.DiscordServerFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DiscordServerPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.DiscordServerFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DiscordServerPayload>
          }
          findMany: {
            args: Prisma.DiscordServerFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DiscordServerPayload>[]
          }
          create: {
            args: Prisma.DiscordServerCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DiscordServerPayload>
          }
          createMany: {
            args: Prisma.DiscordServerCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.DiscordServerCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DiscordServerPayload>[]
          }
          delete: {
            args: Prisma.DiscordServerDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DiscordServerPayload>
          }
          update: {
            args: Prisma.DiscordServerUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DiscordServerPayload>
          }
          deleteMany: {
            args: Prisma.DiscordServerDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.DiscordServerUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.DiscordServerUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DiscordServerPayload>
          }
          aggregate: {
            args: Prisma.DiscordServerAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateDiscordServer>
          }
          groupBy: {
            args: Prisma.DiscordServerGroupByArgs<ExtArgs>
            result: $Utils.Optional<DiscordServerGroupByOutputType>[]
          }
          count: {
            args: Prisma.DiscordServerCountArgs<ExtArgs>
            result: $Utils.Optional<DiscordServerCountAggregateOutputType> | number
          }
        }
      }
      Counter: {
        payload: Prisma.$CounterPayload<ExtArgs>
        fields: Prisma.CounterFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CounterFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CounterPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CounterFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CounterPayload>
          }
          findFirst: {
            args: Prisma.CounterFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CounterPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CounterFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CounterPayload>
          }
          findMany: {
            args: Prisma.CounterFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CounterPayload>[]
          }
          create: {
            args: Prisma.CounterCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CounterPayload>
          }
          createMany: {
            args: Prisma.CounterCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CounterCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CounterPayload>[]
          }
          delete: {
            args: Prisma.CounterDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CounterPayload>
          }
          update: {
            args: Prisma.CounterUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CounterPayload>
          }
          deleteMany: {
            args: Prisma.CounterDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CounterUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.CounterUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CounterPayload>
          }
          aggregate: {
            args: Prisma.CounterAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCounter>
          }
          groupBy: {
            args: Prisma.CounterGroupByArgs<ExtArgs>
            result: $Utils.Optional<CounterGroupByOutputType>[]
          }
          count: {
            args: Prisma.CounterCountArgs<ExtArgs>
            result: $Utils.Optional<CounterCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }


  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */



  /**
   * Models
   */

  /**
   * Model APIUser
   */

  export type AggregateAPIUser = {
    _count: APIUserCountAggregateOutputType | null
    _avg: APIUserAvgAggregateOutputType | null
    _sum: APIUserSumAggregateOutputType | null
    _min: APIUserMinAggregateOutputType | null
    _max: APIUserMaxAggregateOutputType | null
  }

  export type APIUserAvgAggregateOutputType = {
    id: number | null
  }

  export type APIUserSumAggregateOutputType = {
    id: number | null
  }

  export type APIUserMinAggregateOutputType = {
    id: number | null
    password: string | null
    email: string | null
    discordTag: string | null
    username: string | null
    group: $Enums.Group | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type APIUserMaxAggregateOutputType = {
    id: number | null
    password: string | null
    email: string | null
    discordTag: string | null
    username: string | null
    group: $Enums.Group | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type APIUserCountAggregateOutputType = {
    id: number
    password: number
    email: number
    discordTag: number
    username: number
    group: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type APIUserAvgAggregateInputType = {
    id?: true
  }

  export type APIUserSumAggregateInputType = {
    id?: true
  }

  export type APIUserMinAggregateInputType = {
    id?: true
    password?: true
    email?: true
    discordTag?: true
    username?: true
    group?: true
    createdAt?: true
    updatedAt?: true
  }

  export type APIUserMaxAggregateInputType = {
    id?: true
    password?: true
    email?: true
    discordTag?: true
    username?: true
    group?: true
    createdAt?: true
    updatedAt?: true
  }

  export type APIUserCountAggregateInputType = {
    id?: true
    password?: true
    email?: true
    discordTag?: true
    username?: true
    group?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type APIUserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which APIUser to aggregate.
     */
    where?: APIUserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of APIUsers to fetch.
     */
    orderBy?: APIUserOrderByWithRelationInput | APIUserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: APIUserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` APIUsers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` APIUsers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned APIUsers
    **/
    _count?: true | APIUserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: APIUserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: APIUserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: APIUserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: APIUserMaxAggregateInputType
  }

  export type GetAPIUserAggregateType<T extends APIUserAggregateArgs> = {
        [P in keyof T & keyof AggregateAPIUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAPIUser[P]>
      : GetScalarType<T[P], AggregateAPIUser[P]>
  }




  export type APIUserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: APIUserWhereInput
    orderBy?: APIUserOrderByWithAggregationInput | APIUserOrderByWithAggregationInput[]
    by: APIUserScalarFieldEnum[] | APIUserScalarFieldEnum
    having?: APIUserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: APIUserCountAggregateInputType | true
    _avg?: APIUserAvgAggregateInputType
    _sum?: APIUserSumAggregateInputType
    _min?: APIUserMinAggregateInputType
    _max?: APIUserMaxAggregateInputType
  }

  export type APIUserGroupByOutputType = {
    id: number
    password: string
    email: string | null
    discordTag: string
    username: string
    group: $Enums.Group
    createdAt: Date
    updatedAt: Date
    _count: APIUserCountAggregateOutputType | null
    _avg: APIUserAvgAggregateOutputType | null
    _sum: APIUserSumAggregateOutputType | null
    _min: APIUserMinAggregateOutputType | null
    _max: APIUserMaxAggregateOutputType | null
  }

  type GetAPIUserGroupByPayload<T extends APIUserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<APIUserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof APIUserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], APIUserGroupByOutputType[P]>
            : GetScalarType<T[P], APIUserGroupByOutputType[P]>
        }
      >
    >


  export type APIUserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    password?: boolean
    email?: boolean
    discordTag?: boolean
    username?: boolean
    group?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["aPIUser"]>

  export type APIUserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    password?: boolean
    email?: boolean
    discordTag?: boolean
    username?: boolean
    group?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["aPIUser"]>

  export type APIUserSelectScalar = {
    id?: boolean
    password?: boolean
    email?: boolean
    discordTag?: boolean
    username?: boolean
    group?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }


  export type $APIUserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "APIUser"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      password: string
      email: string | null
      discordTag: string
      username: string
      group: $Enums.Group
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["aPIUser"]>
    composites: {}
  }

  type APIUserGetPayload<S extends boolean | null | undefined | APIUserDefaultArgs> = $Result.GetResult<Prisma.$APIUserPayload, S>

  type APIUserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<APIUserFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: APIUserCountAggregateInputType | true
    }

  export interface APIUserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['APIUser'], meta: { name: 'APIUser' } }
    /**
     * Find zero or one APIUser that matches the filter.
     * @param {APIUserFindUniqueArgs} args - Arguments to find a APIUser
     * @example
     * // Get one APIUser
     * const aPIUser = await prisma.aPIUser.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends APIUserFindUniqueArgs>(args: SelectSubset<T, APIUserFindUniqueArgs<ExtArgs>>): Prisma__APIUserClient<$Result.GetResult<Prisma.$APIUserPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one APIUser that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {APIUserFindUniqueOrThrowArgs} args - Arguments to find a APIUser
     * @example
     * // Get one APIUser
     * const aPIUser = await prisma.aPIUser.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends APIUserFindUniqueOrThrowArgs>(args: SelectSubset<T, APIUserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__APIUserClient<$Result.GetResult<Prisma.$APIUserPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first APIUser that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {APIUserFindFirstArgs} args - Arguments to find a APIUser
     * @example
     * // Get one APIUser
     * const aPIUser = await prisma.aPIUser.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends APIUserFindFirstArgs>(args?: SelectSubset<T, APIUserFindFirstArgs<ExtArgs>>): Prisma__APIUserClient<$Result.GetResult<Prisma.$APIUserPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first APIUser that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {APIUserFindFirstOrThrowArgs} args - Arguments to find a APIUser
     * @example
     * // Get one APIUser
     * const aPIUser = await prisma.aPIUser.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends APIUserFindFirstOrThrowArgs>(args?: SelectSubset<T, APIUserFindFirstOrThrowArgs<ExtArgs>>): Prisma__APIUserClient<$Result.GetResult<Prisma.$APIUserPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more APIUsers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {APIUserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all APIUsers
     * const aPIUsers = await prisma.aPIUser.findMany()
     * 
     * // Get first 10 APIUsers
     * const aPIUsers = await prisma.aPIUser.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const aPIUserWithIdOnly = await prisma.aPIUser.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends APIUserFindManyArgs>(args?: SelectSubset<T, APIUserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$APIUserPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a APIUser.
     * @param {APIUserCreateArgs} args - Arguments to create a APIUser.
     * @example
     * // Create one APIUser
     * const APIUser = await prisma.aPIUser.create({
     *   data: {
     *     // ... data to create a APIUser
     *   }
     * })
     * 
     */
    create<T extends APIUserCreateArgs>(args: SelectSubset<T, APIUserCreateArgs<ExtArgs>>): Prisma__APIUserClient<$Result.GetResult<Prisma.$APIUserPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many APIUsers.
     * @param {APIUserCreateManyArgs} args - Arguments to create many APIUsers.
     * @example
     * // Create many APIUsers
     * const aPIUser = await prisma.aPIUser.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends APIUserCreateManyArgs>(args?: SelectSubset<T, APIUserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many APIUsers and returns the data saved in the database.
     * @param {APIUserCreateManyAndReturnArgs} args - Arguments to create many APIUsers.
     * @example
     * // Create many APIUsers
     * const aPIUser = await prisma.aPIUser.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many APIUsers and only return the `id`
     * const aPIUserWithIdOnly = await prisma.aPIUser.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends APIUserCreateManyAndReturnArgs>(args?: SelectSubset<T, APIUserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$APIUserPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a APIUser.
     * @param {APIUserDeleteArgs} args - Arguments to delete one APIUser.
     * @example
     * // Delete one APIUser
     * const APIUser = await prisma.aPIUser.delete({
     *   where: {
     *     // ... filter to delete one APIUser
     *   }
     * })
     * 
     */
    delete<T extends APIUserDeleteArgs>(args: SelectSubset<T, APIUserDeleteArgs<ExtArgs>>): Prisma__APIUserClient<$Result.GetResult<Prisma.$APIUserPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one APIUser.
     * @param {APIUserUpdateArgs} args - Arguments to update one APIUser.
     * @example
     * // Update one APIUser
     * const aPIUser = await prisma.aPIUser.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends APIUserUpdateArgs>(args: SelectSubset<T, APIUserUpdateArgs<ExtArgs>>): Prisma__APIUserClient<$Result.GetResult<Prisma.$APIUserPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more APIUsers.
     * @param {APIUserDeleteManyArgs} args - Arguments to filter APIUsers to delete.
     * @example
     * // Delete a few APIUsers
     * const { count } = await prisma.aPIUser.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends APIUserDeleteManyArgs>(args?: SelectSubset<T, APIUserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more APIUsers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {APIUserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many APIUsers
     * const aPIUser = await prisma.aPIUser.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends APIUserUpdateManyArgs>(args: SelectSubset<T, APIUserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one APIUser.
     * @param {APIUserUpsertArgs} args - Arguments to update or create a APIUser.
     * @example
     * // Update or create a APIUser
     * const aPIUser = await prisma.aPIUser.upsert({
     *   create: {
     *     // ... data to create a APIUser
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the APIUser we want to update
     *   }
     * })
     */
    upsert<T extends APIUserUpsertArgs>(args: SelectSubset<T, APIUserUpsertArgs<ExtArgs>>): Prisma__APIUserClient<$Result.GetResult<Prisma.$APIUserPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of APIUsers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {APIUserCountArgs} args - Arguments to filter APIUsers to count.
     * @example
     * // Count the number of APIUsers
     * const count = await prisma.aPIUser.count({
     *   where: {
     *     // ... the filter for the APIUsers we want to count
     *   }
     * })
    **/
    count<T extends APIUserCountArgs>(
      args?: Subset<T, APIUserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], APIUserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a APIUser.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {APIUserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends APIUserAggregateArgs>(args: Subset<T, APIUserAggregateArgs>): Prisma.PrismaPromise<GetAPIUserAggregateType<T>>

    /**
     * Group by APIUser.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {APIUserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends APIUserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: APIUserGroupByArgs['orderBy'] }
        : { orderBy?: APIUserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, APIUserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAPIUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the APIUser model
   */
  readonly fields: APIUserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for APIUser.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__APIUserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the APIUser model
   */ 
  interface APIUserFieldRefs {
    readonly id: FieldRef<"APIUser", 'Int'>
    readonly password: FieldRef<"APIUser", 'String'>
    readonly email: FieldRef<"APIUser", 'String'>
    readonly discordTag: FieldRef<"APIUser", 'String'>
    readonly username: FieldRef<"APIUser", 'String'>
    readonly group: FieldRef<"APIUser", 'Group'>
    readonly createdAt: FieldRef<"APIUser", 'DateTime'>
    readonly updatedAt: FieldRef<"APIUser", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * APIUser findUnique
   */
  export type APIUserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the APIUser
     */
    select?: APIUserSelect<ExtArgs> | null
    /**
     * Filter, which APIUser to fetch.
     */
    where: APIUserWhereUniqueInput
  }

  /**
   * APIUser findUniqueOrThrow
   */
  export type APIUserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the APIUser
     */
    select?: APIUserSelect<ExtArgs> | null
    /**
     * Filter, which APIUser to fetch.
     */
    where: APIUserWhereUniqueInput
  }

  /**
   * APIUser findFirst
   */
  export type APIUserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the APIUser
     */
    select?: APIUserSelect<ExtArgs> | null
    /**
     * Filter, which APIUser to fetch.
     */
    where?: APIUserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of APIUsers to fetch.
     */
    orderBy?: APIUserOrderByWithRelationInput | APIUserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for APIUsers.
     */
    cursor?: APIUserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` APIUsers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` APIUsers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of APIUsers.
     */
    distinct?: APIUserScalarFieldEnum | APIUserScalarFieldEnum[]
  }

  /**
   * APIUser findFirstOrThrow
   */
  export type APIUserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the APIUser
     */
    select?: APIUserSelect<ExtArgs> | null
    /**
     * Filter, which APIUser to fetch.
     */
    where?: APIUserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of APIUsers to fetch.
     */
    orderBy?: APIUserOrderByWithRelationInput | APIUserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for APIUsers.
     */
    cursor?: APIUserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` APIUsers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` APIUsers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of APIUsers.
     */
    distinct?: APIUserScalarFieldEnum | APIUserScalarFieldEnum[]
  }

  /**
   * APIUser findMany
   */
  export type APIUserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the APIUser
     */
    select?: APIUserSelect<ExtArgs> | null
    /**
     * Filter, which APIUsers to fetch.
     */
    where?: APIUserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of APIUsers to fetch.
     */
    orderBy?: APIUserOrderByWithRelationInput | APIUserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing APIUsers.
     */
    cursor?: APIUserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` APIUsers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` APIUsers.
     */
    skip?: number
    distinct?: APIUserScalarFieldEnum | APIUserScalarFieldEnum[]
  }

  /**
   * APIUser create
   */
  export type APIUserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the APIUser
     */
    select?: APIUserSelect<ExtArgs> | null
    /**
     * The data needed to create a APIUser.
     */
    data: XOR<APIUserCreateInput, APIUserUncheckedCreateInput>
  }

  /**
   * APIUser createMany
   */
  export type APIUserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many APIUsers.
     */
    data: APIUserCreateManyInput | APIUserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * APIUser createManyAndReturn
   */
  export type APIUserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the APIUser
     */
    select?: APIUserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many APIUsers.
     */
    data: APIUserCreateManyInput | APIUserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * APIUser update
   */
  export type APIUserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the APIUser
     */
    select?: APIUserSelect<ExtArgs> | null
    /**
     * The data needed to update a APIUser.
     */
    data: XOR<APIUserUpdateInput, APIUserUncheckedUpdateInput>
    /**
     * Choose, which APIUser to update.
     */
    where: APIUserWhereUniqueInput
  }

  /**
   * APIUser updateMany
   */
  export type APIUserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update APIUsers.
     */
    data: XOR<APIUserUpdateManyMutationInput, APIUserUncheckedUpdateManyInput>
    /**
     * Filter which APIUsers to update
     */
    where?: APIUserWhereInput
  }

  /**
   * APIUser upsert
   */
  export type APIUserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the APIUser
     */
    select?: APIUserSelect<ExtArgs> | null
    /**
     * The filter to search for the APIUser to update in case it exists.
     */
    where: APIUserWhereUniqueInput
    /**
     * In case the APIUser found by the `where` argument doesn't exist, create a new APIUser with this data.
     */
    create: XOR<APIUserCreateInput, APIUserUncheckedCreateInput>
    /**
     * In case the APIUser was found with the provided `where` argument, update it with this data.
     */
    update: XOR<APIUserUpdateInput, APIUserUncheckedUpdateInput>
  }

  /**
   * APIUser delete
   */
  export type APIUserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the APIUser
     */
    select?: APIUserSelect<ExtArgs> | null
    /**
     * Filter which APIUser to delete.
     */
    where: APIUserWhereUniqueInput
  }

  /**
   * APIUser deleteMany
   */
  export type APIUserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which APIUsers to delete
     */
    where?: APIUserWhereInput
  }

  /**
   * APIUser without action
   */
  export type APIUserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the APIUser
     */
    select?: APIUserSelect<ExtArgs> | null
  }


  /**
   * Model AnonymousUserVisit
   */

  export type AggregateAnonymousUserVisit = {
    _count: AnonymousUserVisitCountAggregateOutputType | null
    _avg: AnonymousUserVisitAvgAggregateOutputType | null
    _sum: AnonymousUserVisitSumAggregateOutputType | null
    _min: AnonymousUserVisitMinAggregateOutputType | null
    _max: AnonymousUserVisitMaxAggregateOutputType | null
  }

  export type AnonymousUserVisitAvgAggregateOutputType = {
    id: number | null
    EcoleDirectePlusUserId: number | null
  }

  export type AnonymousUserVisitSumAggregateOutputType = {
    id: number | null
    EcoleDirectePlusUserId: number | null
  }

  export type AnonymousUserVisitMinAggregateOutputType = {
    id: number | null
    EcoleDirectePlusUserId: number | null
  }

  export type AnonymousUserVisitMaxAggregateOutputType = {
    id: number | null
    EcoleDirectePlusUserId: number | null
  }

  export type AnonymousUserVisitCountAggregateOutputType = {
    id: number
    EcoleDirectePlusUserId: number
    _all: number
  }


  export type AnonymousUserVisitAvgAggregateInputType = {
    id?: true
    EcoleDirectePlusUserId?: true
  }

  export type AnonymousUserVisitSumAggregateInputType = {
    id?: true
    EcoleDirectePlusUserId?: true
  }

  export type AnonymousUserVisitMinAggregateInputType = {
    id?: true
    EcoleDirectePlusUserId?: true
  }

  export type AnonymousUserVisitMaxAggregateInputType = {
    id?: true
    EcoleDirectePlusUserId?: true
  }

  export type AnonymousUserVisitCountAggregateInputType = {
    id?: true
    EcoleDirectePlusUserId?: true
    _all?: true
  }

  export type AnonymousUserVisitAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AnonymousUserVisit to aggregate.
     */
    where?: AnonymousUserVisitWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AnonymousUserVisits to fetch.
     */
    orderBy?: AnonymousUserVisitOrderByWithRelationInput | AnonymousUserVisitOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AnonymousUserVisitWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AnonymousUserVisits from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AnonymousUserVisits.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned AnonymousUserVisits
    **/
    _count?: true | AnonymousUserVisitCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AnonymousUserVisitAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AnonymousUserVisitSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AnonymousUserVisitMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AnonymousUserVisitMaxAggregateInputType
  }

  export type GetAnonymousUserVisitAggregateType<T extends AnonymousUserVisitAggregateArgs> = {
        [P in keyof T & keyof AggregateAnonymousUserVisit]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAnonymousUserVisit[P]>
      : GetScalarType<T[P], AggregateAnonymousUserVisit[P]>
  }




  export type AnonymousUserVisitGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AnonymousUserVisitWhereInput
    orderBy?: AnonymousUserVisitOrderByWithAggregationInput | AnonymousUserVisitOrderByWithAggregationInput[]
    by: AnonymousUserVisitScalarFieldEnum[] | AnonymousUserVisitScalarFieldEnum
    having?: AnonymousUserVisitScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AnonymousUserVisitCountAggregateInputType | true
    _avg?: AnonymousUserVisitAvgAggregateInputType
    _sum?: AnonymousUserVisitSumAggregateInputType
    _min?: AnonymousUserVisitMinAggregateInputType
    _max?: AnonymousUserVisitMaxAggregateInputType
  }

  export type AnonymousUserVisitGroupByOutputType = {
    id: number
    EcoleDirectePlusUserId: number
    _count: AnonymousUserVisitCountAggregateOutputType | null
    _avg: AnonymousUserVisitAvgAggregateOutputType | null
    _sum: AnonymousUserVisitSumAggregateOutputType | null
    _min: AnonymousUserVisitMinAggregateOutputType | null
    _max: AnonymousUserVisitMaxAggregateOutputType | null
  }

  type GetAnonymousUserVisitGroupByPayload<T extends AnonymousUserVisitGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AnonymousUserVisitGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AnonymousUserVisitGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AnonymousUserVisitGroupByOutputType[P]>
            : GetScalarType<T[P], AnonymousUserVisitGroupByOutputType[P]>
        }
      >
    >


  export type AnonymousUserVisitSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    EcoleDirectePlusUserId?: boolean
  }, ExtArgs["result"]["anonymousUserVisit"]>

  export type AnonymousUserVisitSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    EcoleDirectePlusUserId?: boolean
  }, ExtArgs["result"]["anonymousUserVisit"]>

  export type AnonymousUserVisitSelectScalar = {
    id?: boolean
    EcoleDirectePlusUserId?: boolean
  }


  export type $AnonymousUserVisitPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "AnonymousUserVisit"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      EcoleDirectePlusUserId: number
    }, ExtArgs["result"]["anonymousUserVisit"]>
    composites: {}
  }

  type AnonymousUserVisitGetPayload<S extends boolean | null | undefined | AnonymousUserVisitDefaultArgs> = $Result.GetResult<Prisma.$AnonymousUserVisitPayload, S>

  type AnonymousUserVisitCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<AnonymousUserVisitFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: AnonymousUserVisitCountAggregateInputType | true
    }

  export interface AnonymousUserVisitDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['AnonymousUserVisit'], meta: { name: 'AnonymousUserVisit' } }
    /**
     * Find zero or one AnonymousUserVisit that matches the filter.
     * @param {AnonymousUserVisitFindUniqueArgs} args - Arguments to find a AnonymousUserVisit
     * @example
     * // Get one AnonymousUserVisit
     * const anonymousUserVisit = await prisma.anonymousUserVisit.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AnonymousUserVisitFindUniqueArgs>(args: SelectSubset<T, AnonymousUserVisitFindUniqueArgs<ExtArgs>>): Prisma__AnonymousUserVisitClient<$Result.GetResult<Prisma.$AnonymousUserVisitPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one AnonymousUserVisit that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {AnonymousUserVisitFindUniqueOrThrowArgs} args - Arguments to find a AnonymousUserVisit
     * @example
     * // Get one AnonymousUserVisit
     * const anonymousUserVisit = await prisma.anonymousUserVisit.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AnonymousUserVisitFindUniqueOrThrowArgs>(args: SelectSubset<T, AnonymousUserVisitFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AnonymousUserVisitClient<$Result.GetResult<Prisma.$AnonymousUserVisitPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first AnonymousUserVisit that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AnonymousUserVisitFindFirstArgs} args - Arguments to find a AnonymousUserVisit
     * @example
     * // Get one AnonymousUserVisit
     * const anonymousUserVisit = await prisma.anonymousUserVisit.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AnonymousUserVisitFindFirstArgs>(args?: SelectSubset<T, AnonymousUserVisitFindFirstArgs<ExtArgs>>): Prisma__AnonymousUserVisitClient<$Result.GetResult<Prisma.$AnonymousUserVisitPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first AnonymousUserVisit that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AnonymousUserVisitFindFirstOrThrowArgs} args - Arguments to find a AnonymousUserVisit
     * @example
     * // Get one AnonymousUserVisit
     * const anonymousUserVisit = await prisma.anonymousUserVisit.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AnonymousUserVisitFindFirstOrThrowArgs>(args?: SelectSubset<T, AnonymousUserVisitFindFirstOrThrowArgs<ExtArgs>>): Prisma__AnonymousUserVisitClient<$Result.GetResult<Prisma.$AnonymousUserVisitPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more AnonymousUserVisits that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AnonymousUserVisitFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all AnonymousUserVisits
     * const anonymousUserVisits = await prisma.anonymousUserVisit.findMany()
     * 
     * // Get first 10 AnonymousUserVisits
     * const anonymousUserVisits = await prisma.anonymousUserVisit.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const anonymousUserVisitWithIdOnly = await prisma.anonymousUserVisit.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AnonymousUserVisitFindManyArgs>(args?: SelectSubset<T, AnonymousUserVisitFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AnonymousUserVisitPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a AnonymousUserVisit.
     * @param {AnonymousUserVisitCreateArgs} args - Arguments to create a AnonymousUserVisit.
     * @example
     * // Create one AnonymousUserVisit
     * const AnonymousUserVisit = await prisma.anonymousUserVisit.create({
     *   data: {
     *     // ... data to create a AnonymousUserVisit
     *   }
     * })
     * 
     */
    create<T extends AnonymousUserVisitCreateArgs>(args: SelectSubset<T, AnonymousUserVisitCreateArgs<ExtArgs>>): Prisma__AnonymousUserVisitClient<$Result.GetResult<Prisma.$AnonymousUserVisitPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many AnonymousUserVisits.
     * @param {AnonymousUserVisitCreateManyArgs} args - Arguments to create many AnonymousUserVisits.
     * @example
     * // Create many AnonymousUserVisits
     * const anonymousUserVisit = await prisma.anonymousUserVisit.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AnonymousUserVisitCreateManyArgs>(args?: SelectSubset<T, AnonymousUserVisitCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many AnonymousUserVisits and returns the data saved in the database.
     * @param {AnonymousUserVisitCreateManyAndReturnArgs} args - Arguments to create many AnonymousUserVisits.
     * @example
     * // Create many AnonymousUserVisits
     * const anonymousUserVisit = await prisma.anonymousUserVisit.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many AnonymousUserVisits and only return the `id`
     * const anonymousUserVisitWithIdOnly = await prisma.anonymousUserVisit.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AnonymousUserVisitCreateManyAndReturnArgs>(args?: SelectSubset<T, AnonymousUserVisitCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AnonymousUserVisitPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a AnonymousUserVisit.
     * @param {AnonymousUserVisitDeleteArgs} args - Arguments to delete one AnonymousUserVisit.
     * @example
     * // Delete one AnonymousUserVisit
     * const AnonymousUserVisit = await prisma.anonymousUserVisit.delete({
     *   where: {
     *     // ... filter to delete one AnonymousUserVisit
     *   }
     * })
     * 
     */
    delete<T extends AnonymousUserVisitDeleteArgs>(args: SelectSubset<T, AnonymousUserVisitDeleteArgs<ExtArgs>>): Prisma__AnonymousUserVisitClient<$Result.GetResult<Prisma.$AnonymousUserVisitPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one AnonymousUserVisit.
     * @param {AnonymousUserVisitUpdateArgs} args - Arguments to update one AnonymousUserVisit.
     * @example
     * // Update one AnonymousUserVisit
     * const anonymousUserVisit = await prisma.anonymousUserVisit.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AnonymousUserVisitUpdateArgs>(args: SelectSubset<T, AnonymousUserVisitUpdateArgs<ExtArgs>>): Prisma__AnonymousUserVisitClient<$Result.GetResult<Prisma.$AnonymousUserVisitPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more AnonymousUserVisits.
     * @param {AnonymousUserVisitDeleteManyArgs} args - Arguments to filter AnonymousUserVisits to delete.
     * @example
     * // Delete a few AnonymousUserVisits
     * const { count } = await prisma.anonymousUserVisit.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AnonymousUserVisitDeleteManyArgs>(args?: SelectSubset<T, AnonymousUserVisitDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AnonymousUserVisits.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AnonymousUserVisitUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many AnonymousUserVisits
     * const anonymousUserVisit = await prisma.anonymousUserVisit.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AnonymousUserVisitUpdateManyArgs>(args: SelectSubset<T, AnonymousUserVisitUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one AnonymousUserVisit.
     * @param {AnonymousUserVisitUpsertArgs} args - Arguments to update or create a AnonymousUserVisit.
     * @example
     * // Update or create a AnonymousUserVisit
     * const anonymousUserVisit = await prisma.anonymousUserVisit.upsert({
     *   create: {
     *     // ... data to create a AnonymousUserVisit
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the AnonymousUserVisit we want to update
     *   }
     * })
     */
    upsert<T extends AnonymousUserVisitUpsertArgs>(args: SelectSubset<T, AnonymousUserVisitUpsertArgs<ExtArgs>>): Prisma__AnonymousUserVisitClient<$Result.GetResult<Prisma.$AnonymousUserVisitPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of AnonymousUserVisits.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AnonymousUserVisitCountArgs} args - Arguments to filter AnonymousUserVisits to count.
     * @example
     * // Count the number of AnonymousUserVisits
     * const count = await prisma.anonymousUserVisit.count({
     *   where: {
     *     // ... the filter for the AnonymousUserVisits we want to count
     *   }
     * })
    **/
    count<T extends AnonymousUserVisitCountArgs>(
      args?: Subset<T, AnonymousUserVisitCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AnonymousUserVisitCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a AnonymousUserVisit.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AnonymousUserVisitAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AnonymousUserVisitAggregateArgs>(args: Subset<T, AnonymousUserVisitAggregateArgs>): Prisma.PrismaPromise<GetAnonymousUserVisitAggregateType<T>>

    /**
     * Group by AnonymousUserVisit.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AnonymousUserVisitGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AnonymousUserVisitGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AnonymousUserVisitGroupByArgs['orderBy'] }
        : { orderBy?: AnonymousUserVisitGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AnonymousUserVisitGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAnonymousUserVisitGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the AnonymousUserVisit model
   */
  readonly fields: AnonymousUserVisitFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for AnonymousUserVisit.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AnonymousUserVisitClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the AnonymousUserVisit model
   */ 
  interface AnonymousUserVisitFieldRefs {
    readonly id: FieldRef<"AnonymousUserVisit", 'Int'>
    readonly EcoleDirectePlusUserId: FieldRef<"AnonymousUserVisit", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * AnonymousUserVisit findUnique
   */
  export type AnonymousUserVisitFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AnonymousUserVisit
     */
    select?: AnonymousUserVisitSelect<ExtArgs> | null
    /**
     * Filter, which AnonymousUserVisit to fetch.
     */
    where: AnonymousUserVisitWhereUniqueInput
  }

  /**
   * AnonymousUserVisit findUniqueOrThrow
   */
  export type AnonymousUserVisitFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AnonymousUserVisit
     */
    select?: AnonymousUserVisitSelect<ExtArgs> | null
    /**
     * Filter, which AnonymousUserVisit to fetch.
     */
    where: AnonymousUserVisitWhereUniqueInput
  }

  /**
   * AnonymousUserVisit findFirst
   */
  export type AnonymousUserVisitFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AnonymousUserVisit
     */
    select?: AnonymousUserVisitSelect<ExtArgs> | null
    /**
     * Filter, which AnonymousUserVisit to fetch.
     */
    where?: AnonymousUserVisitWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AnonymousUserVisits to fetch.
     */
    orderBy?: AnonymousUserVisitOrderByWithRelationInput | AnonymousUserVisitOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AnonymousUserVisits.
     */
    cursor?: AnonymousUserVisitWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AnonymousUserVisits from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AnonymousUserVisits.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AnonymousUserVisits.
     */
    distinct?: AnonymousUserVisitScalarFieldEnum | AnonymousUserVisitScalarFieldEnum[]
  }

  /**
   * AnonymousUserVisit findFirstOrThrow
   */
  export type AnonymousUserVisitFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AnonymousUserVisit
     */
    select?: AnonymousUserVisitSelect<ExtArgs> | null
    /**
     * Filter, which AnonymousUserVisit to fetch.
     */
    where?: AnonymousUserVisitWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AnonymousUserVisits to fetch.
     */
    orderBy?: AnonymousUserVisitOrderByWithRelationInput | AnonymousUserVisitOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AnonymousUserVisits.
     */
    cursor?: AnonymousUserVisitWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AnonymousUserVisits from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AnonymousUserVisits.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AnonymousUserVisits.
     */
    distinct?: AnonymousUserVisitScalarFieldEnum | AnonymousUserVisitScalarFieldEnum[]
  }

  /**
   * AnonymousUserVisit findMany
   */
  export type AnonymousUserVisitFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AnonymousUserVisit
     */
    select?: AnonymousUserVisitSelect<ExtArgs> | null
    /**
     * Filter, which AnonymousUserVisits to fetch.
     */
    where?: AnonymousUserVisitWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AnonymousUserVisits to fetch.
     */
    orderBy?: AnonymousUserVisitOrderByWithRelationInput | AnonymousUserVisitOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing AnonymousUserVisits.
     */
    cursor?: AnonymousUserVisitWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AnonymousUserVisits from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AnonymousUserVisits.
     */
    skip?: number
    distinct?: AnonymousUserVisitScalarFieldEnum | AnonymousUserVisitScalarFieldEnum[]
  }

  /**
   * AnonymousUserVisit create
   */
  export type AnonymousUserVisitCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AnonymousUserVisit
     */
    select?: AnonymousUserVisitSelect<ExtArgs> | null
    /**
     * The data needed to create a AnonymousUserVisit.
     */
    data: XOR<AnonymousUserVisitCreateInput, AnonymousUserVisitUncheckedCreateInput>
  }

  /**
   * AnonymousUserVisit createMany
   */
  export type AnonymousUserVisitCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many AnonymousUserVisits.
     */
    data: AnonymousUserVisitCreateManyInput | AnonymousUserVisitCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * AnonymousUserVisit createManyAndReturn
   */
  export type AnonymousUserVisitCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AnonymousUserVisit
     */
    select?: AnonymousUserVisitSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many AnonymousUserVisits.
     */
    data: AnonymousUserVisitCreateManyInput | AnonymousUserVisitCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * AnonymousUserVisit update
   */
  export type AnonymousUserVisitUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AnonymousUserVisit
     */
    select?: AnonymousUserVisitSelect<ExtArgs> | null
    /**
     * The data needed to update a AnonymousUserVisit.
     */
    data: XOR<AnonymousUserVisitUpdateInput, AnonymousUserVisitUncheckedUpdateInput>
    /**
     * Choose, which AnonymousUserVisit to update.
     */
    where: AnonymousUserVisitWhereUniqueInput
  }

  /**
   * AnonymousUserVisit updateMany
   */
  export type AnonymousUserVisitUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update AnonymousUserVisits.
     */
    data: XOR<AnonymousUserVisitUpdateManyMutationInput, AnonymousUserVisitUncheckedUpdateManyInput>
    /**
     * Filter which AnonymousUserVisits to update
     */
    where?: AnonymousUserVisitWhereInput
  }

  /**
   * AnonymousUserVisit upsert
   */
  export type AnonymousUserVisitUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AnonymousUserVisit
     */
    select?: AnonymousUserVisitSelect<ExtArgs> | null
    /**
     * The filter to search for the AnonymousUserVisit to update in case it exists.
     */
    where: AnonymousUserVisitWhereUniqueInput
    /**
     * In case the AnonymousUserVisit found by the `where` argument doesn't exist, create a new AnonymousUserVisit with this data.
     */
    create: XOR<AnonymousUserVisitCreateInput, AnonymousUserVisitUncheckedCreateInput>
    /**
     * In case the AnonymousUserVisit was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AnonymousUserVisitUpdateInput, AnonymousUserVisitUncheckedUpdateInput>
  }

  /**
   * AnonymousUserVisit delete
   */
  export type AnonymousUserVisitDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AnonymousUserVisit
     */
    select?: AnonymousUserVisitSelect<ExtArgs> | null
    /**
     * Filter which AnonymousUserVisit to delete.
     */
    where: AnonymousUserVisitWhereUniqueInput
  }

  /**
   * AnonymousUserVisit deleteMany
   */
  export type AnonymousUserVisitDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AnonymousUserVisits to delete
     */
    where?: AnonymousUserVisitWhereInput
  }

  /**
   * AnonymousUserVisit without action
   */
  export type AnonymousUserVisitDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AnonymousUserVisit
     */
    select?: AnonymousUserVisitSelect<ExtArgs> | null
  }


  /**
   * Model DiscordServer
   */

  export type AggregateDiscordServer = {
    _count: DiscordServerCountAggregateOutputType | null
    _avg: DiscordServerAvgAggregateOutputType | null
    _sum: DiscordServerSumAggregateOutputType | null
    _min: DiscordServerMinAggregateOutputType | null
    _max: DiscordServerMaxAggregateOutputType | null
  }

  export type DiscordServerAvgAggregateOutputType = {
    id: number | null
  }

  export type DiscordServerSumAggregateOutputType = {
    id: number | null
  }

  export type DiscordServerMinAggregateOutputType = {
    id: number | null
    discordChannelID: string | null
  }

  export type DiscordServerMaxAggregateOutputType = {
    id: number | null
    discordChannelID: string | null
  }

  export type DiscordServerCountAggregateOutputType = {
    id: number
    discordChannelID: number
    _all: number
  }


  export type DiscordServerAvgAggregateInputType = {
    id?: true
  }

  export type DiscordServerSumAggregateInputType = {
    id?: true
  }

  export type DiscordServerMinAggregateInputType = {
    id?: true
    discordChannelID?: true
  }

  export type DiscordServerMaxAggregateInputType = {
    id?: true
    discordChannelID?: true
  }

  export type DiscordServerCountAggregateInputType = {
    id?: true
    discordChannelID?: true
    _all?: true
  }

  export type DiscordServerAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which DiscordServer to aggregate.
     */
    where?: DiscordServerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DiscordServers to fetch.
     */
    orderBy?: DiscordServerOrderByWithRelationInput | DiscordServerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: DiscordServerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DiscordServers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DiscordServers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned DiscordServers
    **/
    _count?: true | DiscordServerCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: DiscordServerAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: DiscordServerSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DiscordServerMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DiscordServerMaxAggregateInputType
  }

  export type GetDiscordServerAggregateType<T extends DiscordServerAggregateArgs> = {
        [P in keyof T & keyof AggregateDiscordServer]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDiscordServer[P]>
      : GetScalarType<T[P], AggregateDiscordServer[P]>
  }




  export type DiscordServerGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DiscordServerWhereInput
    orderBy?: DiscordServerOrderByWithAggregationInput | DiscordServerOrderByWithAggregationInput[]
    by: DiscordServerScalarFieldEnum[] | DiscordServerScalarFieldEnum
    having?: DiscordServerScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DiscordServerCountAggregateInputType | true
    _avg?: DiscordServerAvgAggregateInputType
    _sum?: DiscordServerSumAggregateInputType
    _min?: DiscordServerMinAggregateInputType
    _max?: DiscordServerMaxAggregateInputType
  }

  export type DiscordServerGroupByOutputType = {
    id: number
    discordChannelID: string
    _count: DiscordServerCountAggregateOutputType | null
    _avg: DiscordServerAvgAggregateOutputType | null
    _sum: DiscordServerSumAggregateOutputType | null
    _min: DiscordServerMinAggregateOutputType | null
    _max: DiscordServerMaxAggregateOutputType | null
  }

  type GetDiscordServerGroupByPayload<T extends DiscordServerGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<DiscordServerGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DiscordServerGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DiscordServerGroupByOutputType[P]>
            : GetScalarType<T[P], DiscordServerGroupByOutputType[P]>
        }
      >
    >


  export type DiscordServerSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    discordChannelID?: boolean
  }, ExtArgs["result"]["discordServer"]>

  export type DiscordServerSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    discordChannelID?: boolean
  }, ExtArgs["result"]["discordServer"]>

  export type DiscordServerSelectScalar = {
    id?: boolean
    discordChannelID?: boolean
  }


  export type $DiscordServerPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "DiscordServer"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      discordChannelID: string
    }, ExtArgs["result"]["discordServer"]>
    composites: {}
  }

  type DiscordServerGetPayload<S extends boolean | null | undefined | DiscordServerDefaultArgs> = $Result.GetResult<Prisma.$DiscordServerPayload, S>

  type DiscordServerCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<DiscordServerFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: DiscordServerCountAggregateInputType | true
    }

  export interface DiscordServerDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['DiscordServer'], meta: { name: 'DiscordServer' } }
    /**
     * Find zero or one DiscordServer that matches the filter.
     * @param {DiscordServerFindUniqueArgs} args - Arguments to find a DiscordServer
     * @example
     * // Get one DiscordServer
     * const discordServer = await prisma.discordServer.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends DiscordServerFindUniqueArgs>(args: SelectSubset<T, DiscordServerFindUniqueArgs<ExtArgs>>): Prisma__DiscordServerClient<$Result.GetResult<Prisma.$DiscordServerPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one DiscordServer that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {DiscordServerFindUniqueOrThrowArgs} args - Arguments to find a DiscordServer
     * @example
     * // Get one DiscordServer
     * const discordServer = await prisma.discordServer.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends DiscordServerFindUniqueOrThrowArgs>(args: SelectSubset<T, DiscordServerFindUniqueOrThrowArgs<ExtArgs>>): Prisma__DiscordServerClient<$Result.GetResult<Prisma.$DiscordServerPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first DiscordServer that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DiscordServerFindFirstArgs} args - Arguments to find a DiscordServer
     * @example
     * // Get one DiscordServer
     * const discordServer = await prisma.discordServer.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends DiscordServerFindFirstArgs>(args?: SelectSubset<T, DiscordServerFindFirstArgs<ExtArgs>>): Prisma__DiscordServerClient<$Result.GetResult<Prisma.$DiscordServerPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first DiscordServer that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DiscordServerFindFirstOrThrowArgs} args - Arguments to find a DiscordServer
     * @example
     * // Get one DiscordServer
     * const discordServer = await prisma.discordServer.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends DiscordServerFindFirstOrThrowArgs>(args?: SelectSubset<T, DiscordServerFindFirstOrThrowArgs<ExtArgs>>): Prisma__DiscordServerClient<$Result.GetResult<Prisma.$DiscordServerPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more DiscordServers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DiscordServerFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all DiscordServers
     * const discordServers = await prisma.discordServer.findMany()
     * 
     * // Get first 10 DiscordServers
     * const discordServers = await prisma.discordServer.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const discordServerWithIdOnly = await prisma.discordServer.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends DiscordServerFindManyArgs>(args?: SelectSubset<T, DiscordServerFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DiscordServerPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a DiscordServer.
     * @param {DiscordServerCreateArgs} args - Arguments to create a DiscordServer.
     * @example
     * // Create one DiscordServer
     * const DiscordServer = await prisma.discordServer.create({
     *   data: {
     *     // ... data to create a DiscordServer
     *   }
     * })
     * 
     */
    create<T extends DiscordServerCreateArgs>(args: SelectSubset<T, DiscordServerCreateArgs<ExtArgs>>): Prisma__DiscordServerClient<$Result.GetResult<Prisma.$DiscordServerPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many DiscordServers.
     * @param {DiscordServerCreateManyArgs} args - Arguments to create many DiscordServers.
     * @example
     * // Create many DiscordServers
     * const discordServer = await prisma.discordServer.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends DiscordServerCreateManyArgs>(args?: SelectSubset<T, DiscordServerCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many DiscordServers and returns the data saved in the database.
     * @param {DiscordServerCreateManyAndReturnArgs} args - Arguments to create many DiscordServers.
     * @example
     * // Create many DiscordServers
     * const discordServer = await prisma.discordServer.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many DiscordServers and only return the `id`
     * const discordServerWithIdOnly = await prisma.discordServer.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends DiscordServerCreateManyAndReturnArgs>(args?: SelectSubset<T, DiscordServerCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DiscordServerPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a DiscordServer.
     * @param {DiscordServerDeleteArgs} args - Arguments to delete one DiscordServer.
     * @example
     * // Delete one DiscordServer
     * const DiscordServer = await prisma.discordServer.delete({
     *   where: {
     *     // ... filter to delete one DiscordServer
     *   }
     * })
     * 
     */
    delete<T extends DiscordServerDeleteArgs>(args: SelectSubset<T, DiscordServerDeleteArgs<ExtArgs>>): Prisma__DiscordServerClient<$Result.GetResult<Prisma.$DiscordServerPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one DiscordServer.
     * @param {DiscordServerUpdateArgs} args - Arguments to update one DiscordServer.
     * @example
     * // Update one DiscordServer
     * const discordServer = await prisma.discordServer.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends DiscordServerUpdateArgs>(args: SelectSubset<T, DiscordServerUpdateArgs<ExtArgs>>): Prisma__DiscordServerClient<$Result.GetResult<Prisma.$DiscordServerPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more DiscordServers.
     * @param {DiscordServerDeleteManyArgs} args - Arguments to filter DiscordServers to delete.
     * @example
     * // Delete a few DiscordServers
     * const { count } = await prisma.discordServer.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends DiscordServerDeleteManyArgs>(args?: SelectSubset<T, DiscordServerDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more DiscordServers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DiscordServerUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many DiscordServers
     * const discordServer = await prisma.discordServer.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends DiscordServerUpdateManyArgs>(args: SelectSubset<T, DiscordServerUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one DiscordServer.
     * @param {DiscordServerUpsertArgs} args - Arguments to update or create a DiscordServer.
     * @example
     * // Update or create a DiscordServer
     * const discordServer = await prisma.discordServer.upsert({
     *   create: {
     *     // ... data to create a DiscordServer
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the DiscordServer we want to update
     *   }
     * })
     */
    upsert<T extends DiscordServerUpsertArgs>(args: SelectSubset<T, DiscordServerUpsertArgs<ExtArgs>>): Prisma__DiscordServerClient<$Result.GetResult<Prisma.$DiscordServerPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of DiscordServers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DiscordServerCountArgs} args - Arguments to filter DiscordServers to count.
     * @example
     * // Count the number of DiscordServers
     * const count = await prisma.discordServer.count({
     *   where: {
     *     // ... the filter for the DiscordServers we want to count
     *   }
     * })
    **/
    count<T extends DiscordServerCountArgs>(
      args?: Subset<T, DiscordServerCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DiscordServerCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a DiscordServer.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DiscordServerAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DiscordServerAggregateArgs>(args: Subset<T, DiscordServerAggregateArgs>): Prisma.PrismaPromise<GetDiscordServerAggregateType<T>>

    /**
     * Group by DiscordServer.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DiscordServerGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DiscordServerGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DiscordServerGroupByArgs['orderBy'] }
        : { orderBy?: DiscordServerGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DiscordServerGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDiscordServerGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the DiscordServer model
   */
  readonly fields: DiscordServerFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for DiscordServer.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__DiscordServerClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the DiscordServer model
   */ 
  interface DiscordServerFieldRefs {
    readonly id: FieldRef<"DiscordServer", 'Int'>
    readonly discordChannelID: FieldRef<"DiscordServer", 'String'>
  }
    

  // Custom InputTypes
  /**
   * DiscordServer findUnique
   */
  export type DiscordServerFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DiscordServer
     */
    select?: DiscordServerSelect<ExtArgs> | null
    /**
     * Filter, which DiscordServer to fetch.
     */
    where: DiscordServerWhereUniqueInput
  }

  /**
   * DiscordServer findUniqueOrThrow
   */
  export type DiscordServerFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DiscordServer
     */
    select?: DiscordServerSelect<ExtArgs> | null
    /**
     * Filter, which DiscordServer to fetch.
     */
    where: DiscordServerWhereUniqueInput
  }

  /**
   * DiscordServer findFirst
   */
  export type DiscordServerFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DiscordServer
     */
    select?: DiscordServerSelect<ExtArgs> | null
    /**
     * Filter, which DiscordServer to fetch.
     */
    where?: DiscordServerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DiscordServers to fetch.
     */
    orderBy?: DiscordServerOrderByWithRelationInput | DiscordServerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DiscordServers.
     */
    cursor?: DiscordServerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DiscordServers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DiscordServers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DiscordServers.
     */
    distinct?: DiscordServerScalarFieldEnum | DiscordServerScalarFieldEnum[]
  }

  /**
   * DiscordServer findFirstOrThrow
   */
  export type DiscordServerFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DiscordServer
     */
    select?: DiscordServerSelect<ExtArgs> | null
    /**
     * Filter, which DiscordServer to fetch.
     */
    where?: DiscordServerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DiscordServers to fetch.
     */
    orderBy?: DiscordServerOrderByWithRelationInput | DiscordServerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DiscordServers.
     */
    cursor?: DiscordServerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DiscordServers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DiscordServers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DiscordServers.
     */
    distinct?: DiscordServerScalarFieldEnum | DiscordServerScalarFieldEnum[]
  }

  /**
   * DiscordServer findMany
   */
  export type DiscordServerFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DiscordServer
     */
    select?: DiscordServerSelect<ExtArgs> | null
    /**
     * Filter, which DiscordServers to fetch.
     */
    where?: DiscordServerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DiscordServers to fetch.
     */
    orderBy?: DiscordServerOrderByWithRelationInput | DiscordServerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing DiscordServers.
     */
    cursor?: DiscordServerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DiscordServers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DiscordServers.
     */
    skip?: number
    distinct?: DiscordServerScalarFieldEnum | DiscordServerScalarFieldEnum[]
  }

  /**
   * DiscordServer create
   */
  export type DiscordServerCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DiscordServer
     */
    select?: DiscordServerSelect<ExtArgs> | null
    /**
     * The data needed to create a DiscordServer.
     */
    data: XOR<DiscordServerCreateInput, DiscordServerUncheckedCreateInput>
  }

  /**
   * DiscordServer createMany
   */
  export type DiscordServerCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many DiscordServers.
     */
    data: DiscordServerCreateManyInput | DiscordServerCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * DiscordServer createManyAndReturn
   */
  export type DiscordServerCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DiscordServer
     */
    select?: DiscordServerSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many DiscordServers.
     */
    data: DiscordServerCreateManyInput | DiscordServerCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * DiscordServer update
   */
  export type DiscordServerUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DiscordServer
     */
    select?: DiscordServerSelect<ExtArgs> | null
    /**
     * The data needed to update a DiscordServer.
     */
    data: XOR<DiscordServerUpdateInput, DiscordServerUncheckedUpdateInput>
    /**
     * Choose, which DiscordServer to update.
     */
    where: DiscordServerWhereUniqueInput
  }

  /**
   * DiscordServer updateMany
   */
  export type DiscordServerUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update DiscordServers.
     */
    data: XOR<DiscordServerUpdateManyMutationInput, DiscordServerUncheckedUpdateManyInput>
    /**
     * Filter which DiscordServers to update
     */
    where?: DiscordServerWhereInput
  }

  /**
   * DiscordServer upsert
   */
  export type DiscordServerUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DiscordServer
     */
    select?: DiscordServerSelect<ExtArgs> | null
    /**
     * The filter to search for the DiscordServer to update in case it exists.
     */
    where: DiscordServerWhereUniqueInput
    /**
     * In case the DiscordServer found by the `where` argument doesn't exist, create a new DiscordServer with this data.
     */
    create: XOR<DiscordServerCreateInput, DiscordServerUncheckedCreateInput>
    /**
     * In case the DiscordServer was found with the provided `where` argument, update it with this data.
     */
    update: XOR<DiscordServerUpdateInput, DiscordServerUncheckedUpdateInput>
  }

  /**
   * DiscordServer delete
   */
  export type DiscordServerDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DiscordServer
     */
    select?: DiscordServerSelect<ExtArgs> | null
    /**
     * Filter which DiscordServer to delete.
     */
    where: DiscordServerWhereUniqueInput
  }

  /**
   * DiscordServer deleteMany
   */
  export type DiscordServerDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which DiscordServers to delete
     */
    where?: DiscordServerWhereInput
  }

  /**
   * DiscordServer without action
   */
  export type DiscordServerDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DiscordServer
     */
    select?: DiscordServerSelect<ExtArgs> | null
  }


  /**
   * Model Counter
   */

  export type AggregateCounter = {
    _count: CounterCountAggregateOutputType | null
    _avg: CounterAvgAggregateOutputType | null
    _sum: CounterSumAggregateOutputType | null
    _min: CounterMinAggregateOutputType | null
    _max: CounterMaxAggregateOutputType | null
  }

  export type CounterAvgAggregateOutputType = {
    id: number | null
    count: number | null
  }

  export type CounterSumAggregateOutputType = {
    id: number | null
    count: number | null
  }

  export type CounterMinAggregateOutputType = {
    id: number | null
    count: number | null
  }

  export type CounterMaxAggregateOutputType = {
    id: number | null
    count: number | null
  }

  export type CounterCountAggregateOutputType = {
    id: number
    count: number
    _all: number
  }


  export type CounterAvgAggregateInputType = {
    id?: true
    count?: true
  }

  export type CounterSumAggregateInputType = {
    id?: true
    count?: true
  }

  export type CounterMinAggregateInputType = {
    id?: true
    count?: true
  }

  export type CounterMaxAggregateInputType = {
    id?: true
    count?: true
  }

  export type CounterCountAggregateInputType = {
    id?: true
    count?: true
    _all?: true
  }

  export type CounterAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Counter to aggregate.
     */
    where?: CounterWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Counters to fetch.
     */
    orderBy?: CounterOrderByWithRelationInput | CounterOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CounterWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Counters from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Counters.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Counters
    **/
    _count?: true | CounterCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CounterAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CounterSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CounterMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CounterMaxAggregateInputType
  }

  export type GetCounterAggregateType<T extends CounterAggregateArgs> = {
        [P in keyof T & keyof AggregateCounter]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCounter[P]>
      : GetScalarType<T[P], AggregateCounter[P]>
  }




  export type CounterGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CounterWhereInput
    orderBy?: CounterOrderByWithAggregationInput | CounterOrderByWithAggregationInput[]
    by: CounterScalarFieldEnum[] | CounterScalarFieldEnum
    having?: CounterScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CounterCountAggregateInputType | true
    _avg?: CounterAvgAggregateInputType
    _sum?: CounterSumAggregateInputType
    _min?: CounterMinAggregateInputType
    _max?: CounterMaxAggregateInputType
  }

  export type CounterGroupByOutputType = {
    id: number
    count: number
    _count: CounterCountAggregateOutputType | null
    _avg: CounterAvgAggregateOutputType | null
    _sum: CounterSumAggregateOutputType | null
    _min: CounterMinAggregateOutputType | null
    _max: CounterMaxAggregateOutputType | null
  }

  type GetCounterGroupByPayload<T extends CounterGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CounterGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CounterGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CounterGroupByOutputType[P]>
            : GetScalarType<T[P], CounterGroupByOutputType[P]>
        }
      >
    >


  export type CounterSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    count?: boolean
  }, ExtArgs["result"]["counter"]>

  export type CounterSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    count?: boolean
  }, ExtArgs["result"]["counter"]>

  export type CounterSelectScalar = {
    id?: boolean
    count?: boolean
  }


  export type $CounterPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Counter"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      count: number
    }, ExtArgs["result"]["counter"]>
    composites: {}
  }

  type CounterGetPayload<S extends boolean | null | undefined | CounterDefaultArgs> = $Result.GetResult<Prisma.$CounterPayload, S>

  type CounterCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<CounterFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: CounterCountAggregateInputType | true
    }

  export interface CounterDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Counter'], meta: { name: 'Counter' } }
    /**
     * Find zero or one Counter that matches the filter.
     * @param {CounterFindUniqueArgs} args - Arguments to find a Counter
     * @example
     * // Get one Counter
     * const counter = await prisma.counter.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CounterFindUniqueArgs>(args: SelectSubset<T, CounterFindUniqueArgs<ExtArgs>>): Prisma__CounterClient<$Result.GetResult<Prisma.$CounterPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Counter that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {CounterFindUniqueOrThrowArgs} args - Arguments to find a Counter
     * @example
     * // Get one Counter
     * const counter = await prisma.counter.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CounterFindUniqueOrThrowArgs>(args: SelectSubset<T, CounterFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CounterClient<$Result.GetResult<Prisma.$CounterPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Counter that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CounterFindFirstArgs} args - Arguments to find a Counter
     * @example
     * // Get one Counter
     * const counter = await prisma.counter.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CounterFindFirstArgs>(args?: SelectSubset<T, CounterFindFirstArgs<ExtArgs>>): Prisma__CounterClient<$Result.GetResult<Prisma.$CounterPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Counter that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CounterFindFirstOrThrowArgs} args - Arguments to find a Counter
     * @example
     * // Get one Counter
     * const counter = await prisma.counter.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CounterFindFirstOrThrowArgs>(args?: SelectSubset<T, CounterFindFirstOrThrowArgs<ExtArgs>>): Prisma__CounterClient<$Result.GetResult<Prisma.$CounterPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Counters that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CounterFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Counters
     * const counters = await prisma.counter.findMany()
     * 
     * // Get first 10 Counters
     * const counters = await prisma.counter.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const counterWithIdOnly = await prisma.counter.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CounterFindManyArgs>(args?: SelectSubset<T, CounterFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CounterPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Counter.
     * @param {CounterCreateArgs} args - Arguments to create a Counter.
     * @example
     * // Create one Counter
     * const Counter = await prisma.counter.create({
     *   data: {
     *     // ... data to create a Counter
     *   }
     * })
     * 
     */
    create<T extends CounterCreateArgs>(args: SelectSubset<T, CounterCreateArgs<ExtArgs>>): Prisma__CounterClient<$Result.GetResult<Prisma.$CounterPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Counters.
     * @param {CounterCreateManyArgs} args - Arguments to create many Counters.
     * @example
     * // Create many Counters
     * const counter = await prisma.counter.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CounterCreateManyArgs>(args?: SelectSubset<T, CounterCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Counters and returns the data saved in the database.
     * @param {CounterCreateManyAndReturnArgs} args - Arguments to create many Counters.
     * @example
     * // Create many Counters
     * const counter = await prisma.counter.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Counters and only return the `id`
     * const counterWithIdOnly = await prisma.counter.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CounterCreateManyAndReturnArgs>(args?: SelectSubset<T, CounterCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CounterPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Counter.
     * @param {CounterDeleteArgs} args - Arguments to delete one Counter.
     * @example
     * // Delete one Counter
     * const Counter = await prisma.counter.delete({
     *   where: {
     *     // ... filter to delete one Counter
     *   }
     * })
     * 
     */
    delete<T extends CounterDeleteArgs>(args: SelectSubset<T, CounterDeleteArgs<ExtArgs>>): Prisma__CounterClient<$Result.GetResult<Prisma.$CounterPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Counter.
     * @param {CounterUpdateArgs} args - Arguments to update one Counter.
     * @example
     * // Update one Counter
     * const counter = await prisma.counter.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CounterUpdateArgs>(args: SelectSubset<T, CounterUpdateArgs<ExtArgs>>): Prisma__CounterClient<$Result.GetResult<Prisma.$CounterPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Counters.
     * @param {CounterDeleteManyArgs} args - Arguments to filter Counters to delete.
     * @example
     * // Delete a few Counters
     * const { count } = await prisma.counter.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CounterDeleteManyArgs>(args?: SelectSubset<T, CounterDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Counters.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CounterUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Counters
     * const counter = await prisma.counter.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CounterUpdateManyArgs>(args: SelectSubset<T, CounterUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Counter.
     * @param {CounterUpsertArgs} args - Arguments to update or create a Counter.
     * @example
     * // Update or create a Counter
     * const counter = await prisma.counter.upsert({
     *   create: {
     *     // ... data to create a Counter
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Counter we want to update
     *   }
     * })
     */
    upsert<T extends CounterUpsertArgs>(args: SelectSubset<T, CounterUpsertArgs<ExtArgs>>): Prisma__CounterClient<$Result.GetResult<Prisma.$CounterPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Counters.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CounterCountArgs} args - Arguments to filter Counters to count.
     * @example
     * // Count the number of Counters
     * const count = await prisma.counter.count({
     *   where: {
     *     // ... the filter for the Counters we want to count
     *   }
     * })
    **/
    count<T extends CounterCountArgs>(
      args?: Subset<T, CounterCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CounterCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Counter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CounterAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CounterAggregateArgs>(args: Subset<T, CounterAggregateArgs>): Prisma.PrismaPromise<GetCounterAggregateType<T>>

    /**
     * Group by Counter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CounterGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CounterGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CounterGroupByArgs['orderBy'] }
        : { orderBy?: CounterGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CounterGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCounterGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Counter model
   */
  readonly fields: CounterFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Counter.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CounterClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Counter model
   */ 
  interface CounterFieldRefs {
    readonly id: FieldRef<"Counter", 'Int'>
    readonly count: FieldRef<"Counter", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Counter findUnique
   */
  export type CounterFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Counter
     */
    select?: CounterSelect<ExtArgs> | null
    /**
     * Filter, which Counter to fetch.
     */
    where: CounterWhereUniqueInput
  }

  /**
   * Counter findUniqueOrThrow
   */
  export type CounterFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Counter
     */
    select?: CounterSelect<ExtArgs> | null
    /**
     * Filter, which Counter to fetch.
     */
    where: CounterWhereUniqueInput
  }

  /**
   * Counter findFirst
   */
  export type CounterFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Counter
     */
    select?: CounterSelect<ExtArgs> | null
    /**
     * Filter, which Counter to fetch.
     */
    where?: CounterWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Counters to fetch.
     */
    orderBy?: CounterOrderByWithRelationInput | CounterOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Counters.
     */
    cursor?: CounterWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Counters from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Counters.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Counters.
     */
    distinct?: CounterScalarFieldEnum | CounterScalarFieldEnum[]
  }

  /**
   * Counter findFirstOrThrow
   */
  export type CounterFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Counter
     */
    select?: CounterSelect<ExtArgs> | null
    /**
     * Filter, which Counter to fetch.
     */
    where?: CounterWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Counters to fetch.
     */
    orderBy?: CounterOrderByWithRelationInput | CounterOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Counters.
     */
    cursor?: CounterWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Counters from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Counters.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Counters.
     */
    distinct?: CounterScalarFieldEnum | CounterScalarFieldEnum[]
  }

  /**
   * Counter findMany
   */
  export type CounterFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Counter
     */
    select?: CounterSelect<ExtArgs> | null
    /**
     * Filter, which Counters to fetch.
     */
    where?: CounterWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Counters to fetch.
     */
    orderBy?: CounterOrderByWithRelationInput | CounterOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Counters.
     */
    cursor?: CounterWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Counters from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Counters.
     */
    skip?: number
    distinct?: CounterScalarFieldEnum | CounterScalarFieldEnum[]
  }

  /**
   * Counter create
   */
  export type CounterCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Counter
     */
    select?: CounterSelect<ExtArgs> | null
    /**
     * The data needed to create a Counter.
     */
    data?: XOR<CounterCreateInput, CounterUncheckedCreateInput>
  }

  /**
   * Counter createMany
   */
  export type CounterCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Counters.
     */
    data: CounterCreateManyInput | CounterCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Counter createManyAndReturn
   */
  export type CounterCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Counter
     */
    select?: CounterSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Counters.
     */
    data: CounterCreateManyInput | CounterCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Counter update
   */
  export type CounterUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Counter
     */
    select?: CounterSelect<ExtArgs> | null
    /**
     * The data needed to update a Counter.
     */
    data: XOR<CounterUpdateInput, CounterUncheckedUpdateInput>
    /**
     * Choose, which Counter to update.
     */
    where: CounterWhereUniqueInput
  }

  /**
   * Counter updateMany
   */
  export type CounterUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Counters.
     */
    data: XOR<CounterUpdateManyMutationInput, CounterUncheckedUpdateManyInput>
    /**
     * Filter which Counters to update
     */
    where?: CounterWhereInput
  }

  /**
   * Counter upsert
   */
  export type CounterUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Counter
     */
    select?: CounterSelect<ExtArgs> | null
    /**
     * The filter to search for the Counter to update in case it exists.
     */
    where: CounterWhereUniqueInput
    /**
     * In case the Counter found by the `where` argument doesn't exist, create a new Counter with this data.
     */
    create: XOR<CounterCreateInput, CounterUncheckedCreateInput>
    /**
     * In case the Counter was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CounterUpdateInput, CounterUncheckedUpdateInput>
  }

  /**
   * Counter delete
   */
  export type CounterDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Counter
     */
    select?: CounterSelect<ExtArgs> | null
    /**
     * Filter which Counter to delete.
     */
    where: CounterWhereUniqueInput
  }

  /**
   * Counter deleteMany
   */
  export type CounterDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Counters to delete
     */
    where?: CounterWhereInput
  }

  /**
   * Counter without action
   */
  export type CounterDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Counter
     */
    select?: CounterSelect<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const APIUserScalarFieldEnum: {
    id: 'id',
    password: 'password',
    email: 'email',
    discordTag: 'discordTag',
    username: 'username',
    group: 'group',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type APIUserScalarFieldEnum = (typeof APIUserScalarFieldEnum)[keyof typeof APIUserScalarFieldEnum]


  export const AnonymousUserVisitScalarFieldEnum: {
    id: 'id',
    EcoleDirectePlusUserId: 'EcoleDirectePlusUserId'
  };

  export type AnonymousUserVisitScalarFieldEnum = (typeof AnonymousUserVisitScalarFieldEnum)[keyof typeof AnonymousUserVisitScalarFieldEnum]


  export const DiscordServerScalarFieldEnum: {
    id: 'id',
    discordChannelID: 'discordChannelID'
  };

  export type DiscordServerScalarFieldEnum = (typeof DiscordServerScalarFieldEnum)[keyof typeof DiscordServerScalarFieldEnum]


  export const CounterScalarFieldEnum: {
    id: 'id',
    count: 'count'
  };

  export type CounterScalarFieldEnum = (typeof CounterScalarFieldEnum)[keyof typeof CounterScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'Group'
   */
  export type EnumGroupFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Group'>
    


  /**
   * Reference to a field of type 'Group[]'
   */
  export type ListEnumGroupFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Group[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type APIUserWhereInput = {
    AND?: APIUserWhereInput | APIUserWhereInput[]
    OR?: APIUserWhereInput[]
    NOT?: APIUserWhereInput | APIUserWhereInput[]
    id?: IntFilter<"APIUser"> | number
    password?: StringFilter<"APIUser"> | string
    email?: StringNullableFilter<"APIUser"> | string | null
    discordTag?: StringFilter<"APIUser"> | string
    username?: StringFilter<"APIUser"> | string
    group?: EnumGroupFilter<"APIUser"> | $Enums.Group
    createdAt?: DateTimeFilter<"APIUser"> | Date | string
    updatedAt?: DateTimeFilter<"APIUser"> | Date | string
  }

  export type APIUserOrderByWithRelationInput = {
    id?: SortOrder
    password?: SortOrder
    email?: SortOrderInput | SortOrder
    discordTag?: SortOrder
    username?: SortOrder
    group?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type APIUserWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    email?: string
    discordTag?: string
    username?: string
    AND?: APIUserWhereInput | APIUserWhereInput[]
    OR?: APIUserWhereInput[]
    NOT?: APIUserWhereInput | APIUserWhereInput[]
    password?: StringFilter<"APIUser"> | string
    group?: EnumGroupFilter<"APIUser"> | $Enums.Group
    createdAt?: DateTimeFilter<"APIUser"> | Date | string
    updatedAt?: DateTimeFilter<"APIUser"> | Date | string
  }, "id" | "discordTag" | "username" | "email">

  export type APIUserOrderByWithAggregationInput = {
    id?: SortOrder
    password?: SortOrder
    email?: SortOrderInput | SortOrder
    discordTag?: SortOrder
    username?: SortOrder
    group?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: APIUserCountOrderByAggregateInput
    _avg?: APIUserAvgOrderByAggregateInput
    _max?: APIUserMaxOrderByAggregateInput
    _min?: APIUserMinOrderByAggregateInput
    _sum?: APIUserSumOrderByAggregateInput
  }

  export type APIUserScalarWhereWithAggregatesInput = {
    AND?: APIUserScalarWhereWithAggregatesInput | APIUserScalarWhereWithAggregatesInput[]
    OR?: APIUserScalarWhereWithAggregatesInput[]
    NOT?: APIUserScalarWhereWithAggregatesInput | APIUserScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"APIUser"> | number
    password?: StringWithAggregatesFilter<"APIUser"> | string
    email?: StringNullableWithAggregatesFilter<"APIUser"> | string | null
    discordTag?: StringWithAggregatesFilter<"APIUser"> | string
    username?: StringWithAggregatesFilter<"APIUser"> | string
    group?: EnumGroupWithAggregatesFilter<"APIUser"> | $Enums.Group
    createdAt?: DateTimeWithAggregatesFilter<"APIUser"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"APIUser"> | Date | string
  }

  export type AnonymousUserVisitWhereInput = {
    AND?: AnonymousUserVisitWhereInput | AnonymousUserVisitWhereInput[]
    OR?: AnonymousUserVisitWhereInput[]
    NOT?: AnonymousUserVisitWhereInput | AnonymousUserVisitWhereInput[]
    id?: IntFilter<"AnonymousUserVisit"> | number
    EcoleDirectePlusUserId?: IntFilter<"AnonymousUserVisit"> | number
  }

  export type AnonymousUserVisitOrderByWithRelationInput = {
    id?: SortOrder
    EcoleDirectePlusUserId?: SortOrder
  }

  export type AnonymousUserVisitWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    EcoleDirectePlusUserId?: number
    AND?: AnonymousUserVisitWhereInput | AnonymousUserVisitWhereInput[]
    OR?: AnonymousUserVisitWhereInput[]
    NOT?: AnonymousUserVisitWhereInput | AnonymousUserVisitWhereInput[]
  }, "id" | "EcoleDirectePlusUserId">

  export type AnonymousUserVisitOrderByWithAggregationInput = {
    id?: SortOrder
    EcoleDirectePlusUserId?: SortOrder
    _count?: AnonymousUserVisitCountOrderByAggregateInput
    _avg?: AnonymousUserVisitAvgOrderByAggregateInput
    _max?: AnonymousUserVisitMaxOrderByAggregateInput
    _min?: AnonymousUserVisitMinOrderByAggregateInput
    _sum?: AnonymousUserVisitSumOrderByAggregateInput
  }

  export type AnonymousUserVisitScalarWhereWithAggregatesInput = {
    AND?: AnonymousUserVisitScalarWhereWithAggregatesInput | AnonymousUserVisitScalarWhereWithAggregatesInput[]
    OR?: AnonymousUserVisitScalarWhereWithAggregatesInput[]
    NOT?: AnonymousUserVisitScalarWhereWithAggregatesInput | AnonymousUserVisitScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"AnonymousUserVisit"> | number
    EcoleDirectePlusUserId?: IntWithAggregatesFilter<"AnonymousUserVisit"> | number
  }

  export type DiscordServerWhereInput = {
    AND?: DiscordServerWhereInput | DiscordServerWhereInput[]
    OR?: DiscordServerWhereInput[]
    NOT?: DiscordServerWhereInput | DiscordServerWhereInput[]
    id?: IntFilter<"DiscordServer"> | number
    discordChannelID?: StringFilter<"DiscordServer"> | string
  }

  export type DiscordServerOrderByWithRelationInput = {
    id?: SortOrder
    discordChannelID?: SortOrder
  }

  export type DiscordServerWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: DiscordServerWhereInput | DiscordServerWhereInput[]
    OR?: DiscordServerWhereInput[]
    NOT?: DiscordServerWhereInput | DiscordServerWhereInput[]
    discordChannelID?: StringFilter<"DiscordServer"> | string
  }, "id">

  export type DiscordServerOrderByWithAggregationInput = {
    id?: SortOrder
    discordChannelID?: SortOrder
    _count?: DiscordServerCountOrderByAggregateInput
    _avg?: DiscordServerAvgOrderByAggregateInput
    _max?: DiscordServerMaxOrderByAggregateInput
    _min?: DiscordServerMinOrderByAggregateInput
    _sum?: DiscordServerSumOrderByAggregateInput
  }

  export type DiscordServerScalarWhereWithAggregatesInput = {
    AND?: DiscordServerScalarWhereWithAggregatesInput | DiscordServerScalarWhereWithAggregatesInput[]
    OR?: DiscordServerScalarWhereWithAggregatesInput[]
    NOT?: DiscordServerScalarWhereWithAggregatesInput | DiscordServerScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"DiscordServer"> | number
    discordChannelID?: StringWithAggregatesFilter<"DiscordServer"> | string
  }

  export type CounterWhereInput = {
    AND?: CounterWhereInput | CounterWhereInput[]
    OR?: CounterWhereInput[]
    NOT?: CounterWhereInput | CounterWhereInput[]
    id?: IntFilter<"Counter"> | number
    count?: IntFilter<"Counter"> | number
  }

  export type CounterOrderByWithRelationInput = {
    id?: SortOrder
    count?: SortOrder
  }

  export type CounterWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: CounterWhereInput | CounterWhereInput[]
    OR?: CounterWhereInput[]
    NOT?: CounterWhereInput | CounterWhereInput[]
    count?: IntFilter<"Counter"> | number
  }, "id">

  export type CounterOrderByWithAggregationInput = {
    id?: SortOrder
    count?: SortOrder
    _count?: CounterCountOrderByAggregateInput
    _avg?: CounterAvgOrderByAggregateInput
    _max?: CounterMaxOrderByAggregateInput
    _min?: CounterMinOrderByAggregateInput
    _sum?: CounterSumOrderByAggregateInput
  }

  export type CounterScalarWhereWithAggregatesInput = {
    AND?: CounterScalarWhereWithAggregatesInput | CounterScalarWhereWithAggregatesInput[]
    OR?: CounterScalarWhereWithAggregatesInput[]
    NOT?: CounterScalarWhereWithAggregatesInput | CounterScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Counter"> | number
    count?: IntWithAggregatesFilter<"Counter"> | number
  }

  export type APIUserCreateInput = {
    password: string
    email?: string | null
    discordTag: string
    username: string
    group: $Enums.Group
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type APIUserUncheckedCreateInput = {
    id?: number
    password: string
    email?: string | null
    discordTag: string
    username: string
    group: $Enums.Group
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type APIUserUpdateInput = {
    password?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    discordTag?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    group?: EnumGroupFieldUpdateOperationsInput | $Enums.Group
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type APIUserUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    password?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    discordTag?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    group?: EnumGroupFieldUpdateOperationsInput | $Enums.Group
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type APIUserCreateManyInput = {
    id?: number
    password: string
    email?: string | null
    discordTag: string
    username: string
    group: $Enums.Group
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type APIUserUpdateManyMutationInput = {
    password?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    discordTag?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    group?: EnumGroupFieldUpdateOperationsInput | $Enums.Group
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type APIUserUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    password?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    discordTag?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    group?: EnumGroupFieldUpdateOperationsInput | $Enums.Group
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AnonymousUserVisitCreateInput = {
    EcoleDirectePlusUserId: number
  }

  export type AnonymousUserVisitUncheckedCreateInput = {
    id?: number
    EcoleDirectePlusUserId: number
  }

  export type AnonymousUserVisitUpdateInput = {
    EcoleDirectePlusUserId?: IntFieldUpdateOperationsInput | number
  }

  export type AnonymousUserVisitUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    EcoleDirectePlusUserId?: IntFieldUpdateOperationsInput | number
  }

  export type AnonymousUserVisitCreateManyInput = {
    id?: number
    EcoleDirectePlusUserId: number
  }

  export type AnonymousUserVisitUpdateManyMutationInput = {
    EcoleDirectePlusUserId?: IntFieldUpdateOperationsInput | number
  }

  export type AnonymousUserVisitUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    EcoleDirectePlusUserId?: IntFieldUpdateOperationsInput | number
  }

  export type DiscordServerCreateInput = {
    discordChannelID: string
  }

  export type DiscordServerUncheckedCreateInput = {
    id?: number
    discordChannelID: string
  }

  export type DiscordServerUpdateInput = {
    discordChannelID?: StringFieldUpdateOperationsInput | string
  }

  export type DiscordServerUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    discordChannelID?: StringFieldUpdateOperationsInput | string
  }

  export type DiscordServerCreateManyInput = {
    id?: number
    discordChannelID: string
  }

  export type DiscordServerUpdateManyMutationInput = {
    discordChannelID?: StringFieldUpdateOperationsInput | string
  }

  export type DiscordServerUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    discordChannelID?: StringFieldUpdateOperationsInput | string
  }

  export type CounterCreateInput = {
    count?: number
  }

  export type CounterUncheckedCreateInput = {
    id?: number
    count?: number
  }

  export type CounterUpdateInput = {
    count?: IntFieldUpdateOperationsInput | number
  }

  export type CounterUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    count?: IntFieldUpdateOperationsInput | number
  }

  export type CounterCreateManyInput = {
    id?: number
    count?: number
  }

  export type CounterUpdateManyMutationInput = {
    count?: IntFieldUpdateOperationsInput | number
  }

  export type CounterUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    count?: IntFieldUpdateOperationsInput | number
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type EnumGroupFilter<$PrismaModel = never> = {
    equals?: $Enums.Group | EnumGroupFieldRefInput<$PrismaModel>
    in?: $Enums.Group[] | ListEnumGroupFieldRefInput<$PrismaModel>
    notIn?: $Enums.Group[] | ListEnumGroupFieldRefInput<$PrismaModel>
    not?: NestedEnumGroupFilter<$PrismaModel> | $Enums.Group
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type APIUserCountOrderByAggregateInput = {
    id?: SortOrder
    password?: SortOrder
    email?: SortOrder
    discordTag?: SortOrder
    username?: SortOrder
    group?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type APIUserAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type APIUserMaxOrderByAggregateInput = {
    id?: SortOrder
    password?: SortOrder
    email?: SortOrder
    discordTag?: SortOrder
    username?: SortOrder
    group?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type APIUserMinOrderByAggregateInput = {
    id?: SortOrder
    password?: SortOrder
    email?: SortOrder
    discordTag?: SortOrder
    username?: SortOrder
    group?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type APIUserSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type EnumGroupWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Group | EnumGroupFieldRefInput<$PrismaModel>
    in?: $Enums.Group[] | ListEnumGroupFieldRefInput<$PrismaModel>
    notIn?: $Enums.Group[] | ListEnumGroupFieldRefInput<$PrismaModel>
    not?: NestedEnumGroupWithAggregatesFilter<$PrismaModel> | $Enums.Group
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumGroupFilter<$PrismaModel>
    _max?: NestedEnumGroupFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type AnonymousUserVisitCountOrderByAggregateInput = {
    id?: SortOrder
    EcoleDirectePlusUserId?: SortOrder
  }

  export type AnonymousUserVisitAvgOrderByAggregateInput = {
    id?: SortOrder
    EcoleDirectePlusUserId?: SortOrder
  }

  export type AnonymousUserVisitMaxOrderByAggregateInput = {
    id?: SortOrder
    EcoleDirectePlusUserId?: SortOrder
  }

  export type AnonymousUserVisitMinOrderByAggregateInput = {
    id?: SortOrder
    EcoleDirectePlusUserId?: SortOrder
  }

  export type AnonymousUserVisitSumOrderByAggregateInput = {
    id?: SortOrder
    EcoleDirectePlusUserId?: SortOrder
  }

  export type DiscordServerCountOrderByAggregateInput = {
    id?: SortOrder
    discordChannelID?: SortOrder
  }

  export type DiscordServerAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type DiscordServerMaxOrderByAggregateInput = {
    id?: SortOrder
    discordChannelID?: SortOrder
  }

  export type DiscordServerMinOrderByAggregateInput = {
    id?: SortOrder
    discordChannelID?: SortOrder
  }

  export type DiscordServerSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type CounterCountOrderByAggregateInput = {
    id?: SortOrder
    count?: SortOrder
  }

  export type CounterAvgOrderByAggregateInput = {
    id?: SortOrder
    count?: SortOrder
  }

  export type CounterMaxOrderByAggregateInput = {
    id?: SortOrder
    count?: SortOrder
  }

  export type CounterMinOrderByAggregateInput = {
    id?: SortOrder
    count?: SortOrder
  }

  export type CounterSumOrderByAggregateInput = {
    id?: SortOrder
    count?: SortOrder
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type EnumGroupFieldUpdateOperationsInput = {
    set?: $Enums.Group
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedEnumGroupFilter<$PrismaModel = never> = {
    equals?: $Enums.Group | EnumGroupFieldRefInput<$PrismaModel>
    in?: $Enums.Group[] | ListEnumGroupFieldRefInput<$PrismaModel>
    notIn?: $Enums.Group[] | ListEnumGroupFieldRefInput<$PrismaModel>
    not?: NestedEnumGroupFilter<$PrismaModel> | $Enums.Group
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedEnumGroupWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Group | EnumGroupFieldRefInput<$PrismaModel>
    in?: $Enums.Group[] | ListEnumGroupFieldRefInput<$PrismaModel>
    notIn?: $Enums.Group[] | ListEnumGroupFieldRefInput<$PrismaModel>
    not?: NestedEnumGroupWithAggregatesFilter<$PrismaModel> | $Enums.Group
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumGroupFilter<$PrismaModel>
    _max?: NestedEnumGroupFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use APIUserDefaultArgs instead
     */
    export type APIUserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = APIUserDefaultArgs<ExtArgs>
    /**
     * @deprecated Use AnonymousUserVisitDefaultArgs instead
     */
    export type AnonymousUserVisitArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = AnonymousUserVisitDefaultArgs<ExtArgs>
    /**
     * @deprecated Use DiscordServerDefaultArgs instead
     */
    export type DiscordServerArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = DiscordServerDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CounterDefaultArgs instead
     */
    export type CounterArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CounterDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}